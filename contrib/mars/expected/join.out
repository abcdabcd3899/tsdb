-- start_ignore
create extension if not exists mars;
NOTICE:  extension "mars" already exists, skipping
create extension if not exists matrixts;
NOTICE:  extension "matrixts" already exists, skipping
drop schema if exists test_join;
NOTICE:  schema "test_join" does not exist, skipping
create schema test_join;
-- end_ignore
\set device test_join.device
\set performance test_join.performance
create table :device (tag int, name text, attr1 text) using heap;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'tag' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create unique index on :device(tag);
create table :performance (
		tag int,
		ts timestamp,
		perf1 int, 
		perf2 float) 
	using mars 
	with (group_col_ = "{tag}", group_param_col_ = "{ts in 1 hour}")
	distributed by (tag);
insert into :device select i, concat('device_', i), 'cpu' from generate_series(1, 10) i;
insert into :performance select i / 50 + 1, '2020-01-01 08:00:00'::timestamp + concat(i, ' mins')::interval, i, i::float/100 from generate_series(0, 249) i;
explain (costs off)
select sum(perf1), max(perf2) from :performance
where tag in (select tag from :device where name in ('device_1', 'device_4'));
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate
   ->  Gather Motion 3:1  (slice1; segments: 3)
         ->  Nested Loop
               ->  Seq Scan on device
                     Filter: (name = ANY ('{device_1,device_4}'::text[]))
               ->  Custom Scan (MarsSortScan) on performance
                     Filter: (device.tag = tag)
 Optimizer: Postgres query optimizer
(8 rows)

select sum(perf1), max(perf2) from :performance
where tag in (select tag from :device where name in ('device_1', 'device_4'));
 sum  | max  
------+------
 9950 | 1.99
(1 row)

explain (costs off)
select sum(perf1), max(perf2) from :performance
where tag < (select distinct tag from :device where name in ('device_3'));
                       QUERY PLAN                        
---------------------------------------------------------
 Finalize Aggregate
   InitPlan 1 (returns $0)  (slice2)
     ->  Gather Motion 3:1  (slice3; segments: 3)
           ->  HashAggregate
                 Group Key: device.tag
                 ->  Seq Scan on device
                       Filter: (name = 'device_3'::text)
   ->  Gather Motion 3:1  (slice1; segments: 3)
         ->  Custom Scan (MarsAggScan)
 Optimizer: Postgres query optimizer
(10 rows)

select sum(perf1), max(perf2) from :performance
where tag < (select distinct tag from :device where name in ('device_3'));
 sum  | max  
------+------
 4950 | 0.99
(1 row)

explain (costs off)
select sum(perf1), max(perf2) from :performance
where tag > (select distinct tag from :device where name in ('device_3'));
                       QUERY PLAN                        
---------------------------------------------------------
 Finalize Aggregate
   InitPlan 1 (returns $0)  (slice2)
     ->  Gather Motion 3:1  (slice3; segments: 3)
           ->  HashAggregate
                 Group Key: device.tag
                 ->  Seq Scan on device
                       Filter: (name = 'device_3'::text)
   ->  Gather Motion 3:1  (slice1; segments: 3)
         ->  Custom Scan (MarsAggScan)
 Optimizer: Postgres query optimizer
(10 rows)

select sum(perf1), max(perf2) from :performance
where tag > (select distinct tag from :device where name in ('device_3'));
  sum  | max  
-------+------
 19950 | 2.49
(1 row)

explain (costs off)
select time_bucket('1 hour', ts) as hour, sum(perf1), max(perf2)
  from :performance
 where tag in (select distinct tag from :device
                where name in ('device_1', 'device_4'))
 group by hour;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  GroupAggregate
         Group Key: (time_bucket('@ 1 hour'::interval, performance.ts))
         ->  Sort
               Sort Key: (time_bucket('@ 1 hour'::interval, performance.ts))
               ->  Redistribute Motion 3:3  (slice2; segments: 3)
                     Hash Key: (time_bucket('@ 1 hour'::interval, performance.ts))
                     ->  Nested Loop
                           ->  Seq Scan on device
                                 Filter: (name = ANY ('{device_1,device_4}'::text[]))
                           ->  Custom Scan (MarsSortScan) on performance
                                 Filter: (device.tag = tag)
 Optimizer: Postgres query optimizer
(13 rows)

select time_bucket('1 hour', ts) as hour, sum(perf1), max(perf2)
  from :performance
 where tag in (select distinct tag from :device
                where name in ('device_1', 'device_4'))
 group by hour;
           hour           | sum  | max  
--------------------------+------+------
 Wed Jan 01 08:00:00 2020 | 1225 | 0.49
 Wed Jan 01 10:00:00 2020 | 4935 | 1.79
 Wed Jan 01 11:00:00 2020 | 3790 | 1.99
(3 rows)

-- test MARS as sub-partition 
create table part_root (like :performance) partition by range (ts);
NOTICE:  table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
alter table part_root attach partition :performance for values from('2020-01-01') to ('2020-02-01');
explain (costs off)
select sum(perf1), max(perf2) from part_root
where tag in (select tag from :device where name in ('device_1', 'device_4'));
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate
   ->  Gather Motion 3:1  (slice1; segments: 3)
         ->  Nested Loop
               ->  Seq Scan on device
                     Filter: (name = ANY ('{device_1,device_4}'::text[]))
               ->  Custom Scan (MarsSortScan) on performance
                     Filter: (device.tag = tag)
 Optimizer: Postgres query optimizer
(8 rows)

select sum(perf1), max(perf2) from part_root
where tag in (select tag from :device where name in ('device_1', 'device_4'));
 sum  | max  
------+------
 9950 | 1.99
(1 row)

explain (costs off)
select sum(perf1), max(perf2) from part_root
where tag < (select distinct tag from :device where name in ('device_3'));
                       QUERY PLAN                        
---------------------------------------------------------
 Finalize Aggregate
   InitPlan 1 (returns $0)  (slice2)
     ->  Gather Motion 3:1  (slice3; segments: 3)
           ->  HashAggregate
                 Group Key: device.tag
                 ->  Seq Scan on device
                       Filter: (name = 'device_3'::text)
   ->  Gather Motion 3:1  (slice1; segments: 3)
         ->  Custom Scan (MarsAggScan)
 Optimizer: Postgres query optimizer
(10 rows)

select sum(perf1), max(perf2) from part_root
where tag < (select distinct tag from :device where name in ('device_3'));
 sum  | max  
------+------
 4950 | 0.99
(1 row)

explain (costs off)
select sum(perf1), max(perf2) from part_root
where tag > (select distinct tag from :device where name in ('device_3'));
                       QUERY PLAN                        
---------------------------------------------------------
 Finalize Aggregate
   InitPlan 1 (returns $0)  (slice2)
     ->  Gather Motion 3:1  (slice3; segments: 3)
           ->  HashAggregate
                 Group Key: device.tag
                 ->  Seq Scan on device
                       Filter: (name = 'device_3'::text)
   ->  Gather Motion 3:1  (slice1; segments: 3)
         ->  Custom Scan (MarsAggScan)
 Optimizer: Postgres query optimizer
(10 rows)

select sum(perf1), max(perf2) from part_root
where tag > (select distinct tag from :device where name in ('device_3'));
  sum  | max  
-------+------
 19950 | 2.49
(1 row)

explain (costs off)
select time_bucket('1 hour', ts) as hour, sum(perf1), max(perf2)
  from part_root
 where tag in (select distinct tag from :device
                where name in ('device_1', 'device_4'))
 group by hour;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  GroupAggregate
         Group Key: (time_bucket('@ 1 hour'::interval, performance.ts))
         ->  Sort
               Sort Key: (time_bucket('@ 1 hour'::interval, performance.ts))
               ->  Redistribute Motion 3:3  (slice2; segments: 3)
                     Hash Key: (time_bucket('@ 1 hour'::interval, performance.ts))
                     ->  Nested Loop
                           ->  Seq Scan on device
                                 Filter: (name = ANY ('{device_1,device_4}'::text[]))
                           ->  Custom Scan (MarsSortScan) on performance
                                 Filter: (device.tag = tag)
 Optimizer: Postgres query optimizer
(13 rows)

select time_bucket('1 hour', ts) as hour, sum(perf1), max(perf2)
  from part_root
 where tag in (select distinct tag from :device
                where name in ('device_1', 'device_4'))
 group by hour;
           hour           | sum  | max  
--------------------------+------+------
 Wed Jan 01 08:00:00 2020 | 1225 | 0.49
 Wed Jan 01 10:00:00 2020 | 4935 | 1.79
 Wed Jan 01 11:00:00 2020 | 3790 | 1.99
(3 rows)

