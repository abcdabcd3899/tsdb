--
-- mars extension depends on matrixts, verify the dependence
--
drop extension if exists mars cascade;
drop extension if exists matrixts cascade;
-- this should fail due to extension dependence
create extension mars;
ERROR:  required extension "matrixts" is not installed
HINT:  Use CREATE EXTENSION ... CASCADE to install required extensions too.
-- this should succeed
create extension mars cascade;
NOTICE:  installing required extension "matrixts"
drop extension mars cascade;
drop extension matrixts cascade;
-- this should also succeed
create extension matrixts;
create extension mars;
--
-- verify extension versions
--
-- by default the latest version is installed
drop extension mars cascade;
create extension mars;
\dx mars
                  List of installed extensions
 Name | Version | Schema |             Description              
------+---------+--------+--------------------------------------
 mars | 1.5     | public | Matrix Append-only Resilient Storage
(1 row)

\dx+ mars
                                      Objects in extension "mars"
                                           Object description                                           
--------------------------------------------------------------------------------------------------------
 access method mars
 event trigger try_drop_dependent
 function mars.add_partition(regclass,timestamp without time zone,interval)
 function mars.add_partition(regclass,timestamp without time zone,timestamp without time zone,interval)
 function mars.add_partition(regclass,timestamp with time zone,timestamp with time zone,interval)
 function mars.aux_size(regclass)
 function mars.build_timeseries_table(regclass,text,boolean)
 function mars.catalog_manual_init_()
 function mars.compress_info(regclass,integer,bigint)
 function mars.compress_partition(regclass,interval)
 function mars.compress_relation_(regclass,regclass)
 function mars.create_new_name(text,boolean)
 function mars.destroy_timeseries_table(regclass)
 function mars.drop_catalog()
 function mars.fetch_distkey(regclass)
 function mars.fetch_target_mars_rel(regclass,regclass,interval)
 function mars.fetch_template_table_name(oid)
 function mars.get_bloat_info(regclass)
 function mars.__get_tagkey_names(regclass)
 function mars.__get_timekey_names(regclass)
 function mars.__get_with_option_as_text(regclass)
 function mars.__key_names_to_attnums(regclass,name[])
 function mars.list_partition(regclass)
 function mars.__list_with_options(regclass)
 function mars.ls(regclass,integer)
 function mars.merge_relation_(regclass,regclass,regclass)
 function mars.peragg_sum(regclass)
 function mars.preagg_sum(regclass)
 function mars.__quote_and_join_names(name[],text)
 function mars_tableam_handler(internal)
 schema mars
 table matrixts_internal.monotonic_func
(32 rows)

-- we can also specify the version
drop extension mars cascade;
create extension mars with version '1.0';
\dx mars
                  List of installed extensions
 Name | Version | Schema |             Description              
------+---------+--------+--------------------------------------
 mars | 1.0     | public | Matrix Append-only Resilient Storage
(1 row)

\dx+ mars
                                      Objects in extension "mars"
                                           Object description                                           
--------------------------------------------------------------------------------------------------------
 access method mars
 function mars.add_partition(regclass,timestamp without time zone,interval)
 function mars.add_partition(regclass,timestamp without time zone,timestamp without time zone,interval)
 function mars.add_partition(regclass,timestamp with time zone,timestamp with time zone,interval)
 function mars.aux_size(regclass)
 function mars.build_timeseries_table(regclass,text,boolean)
 function mars.compress_info(regclass,integer,bigint)
 function mars.compress_partition(regclass)
 function mars.create_new_name(text,boolean)
 function mars.destroy_timeseries_table(regclass)
 function mars.fetch_distkey(regclass)
 function mars.fetch_template_table_name(oid)
 function mars.list_partition(regclass)
 function mars.ls(regclass,integer)
 function mars.peragg_sum(regclass)
 function mars_tableam_handler(internal)
 schema mars
(17 rows)

-- we can also update the extension manually
alter extension mars update;
\dx mars
                  List of installed extensions
 Name | Version | Schema |             Description              
------+---------+--------+--------------------------------------
 mars | 1.5     | public | Matrix Append-only Resilient Storage
(1 row)

\dx+ mars
                                      Objects in extension "mars"
                                           Object description                                           
--------------------------------------------------------------------------------------------------------
 access method mars
 event trigger try_drop_dependent
 function mars.add_partition(regclass,timestamp without time zone,interval)
 function mars.add_partition(regclass,timestamp without time zone,timestamp without time zone,interval)
 function mars.add_partition(regclass,timestamp with time zone,timestamp with time zone,interval)
 function mars.aux_size(regclass)
 function mars.build_timeseries_table(regclass,text,boolean)
 function mars.catalog_manual_init_()
 function mars.compress_info(regclass,integer,bigint)
 function mars.compress_partition(regclass,interval)
 function mars.compress_relation_(regclass,regclass)
 function mars.create_new_name(text,boolean)
 function mars.destroy_timeseries_table(regclass)
 function mars.drop_catalog()
 function mars.fetch_distkey(regclass)
 function mars.fetch_target_mars_rel(regclass,regclass,interval)
 function mars.fetch_template_table_name(oid)
 function mars.get_bloat_info(regclass)
 function mars.__get_tagkey_names(regclass)
 function mars.__get_timekey_names(regclass)
 function mars.__get_with_option_as_text(regclass)
 function mars.__key_names_to_attnums(regclass,name[])
 function mars.list_partition(regclass)
 function mars.__list_with_options(regclass)
 function mars.ls(regclass,integer)
 function mars.merge_relation_(regclass,regclass,regclass)
 function mars.peragg_sum(regclass)
 function mars.preagg_sum(regclass)
 function mars.__quote_and_join_names(name[],text)
 function mars_tableam_handler(internal)
 schema mars
 table matrixts_internal.monotonic_func
(32 rows)

--
-- verify basic behaviors
--
SELECT amtype = 't' FROM pg_am WHERE amname = 'mars' ;
 ?column? 
----------
 t
(1 row)

create table foo(a int, b int) using mars;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into foo select i, i * 2 from generate_series(1, 5) i;
select * from foo;
 a | b  
---+----
 1 |  2
 2 |  4
 3 |  6
 4 |  8
 5 | 10
(5 rows)

drop table foo;
create table foo (a bool) using mars;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into foo select (i % 2)::bool from generate_series(1, 10) as i;
select * from foo;
 a 
---
 t
 f
 t
 f
 t
 f
 t
 f
 t
 f
(10 rows)

drop table foo;
-- failed case
DROP EXTENSION mars;
SELECT count(*) FROM pg_am WHERE amname = 'mars';
 count 
-------
     0
(1 row)

-- bfv: the parent of a partioned table will has relam=0, and when mars is not
-- loaded yet, the rel will be considered as mars incorrectly, and lead to
-- below runtime error:
--
--     ERROR:  missing mx_mars entry for relation "bfv_mars_parted_t1"
--
create table bfv_mars_parted_t1 (partkey timestamp) partition by range (partkey);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'partkey' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table bfv_mars_parted_t11 partition of bfv_mars_parted_t1 for values from (minvalue) to (current_timestamp);
NOTICE:  table has parent, setting distribution columns to match parent table
create table bfv_mars_parted_t12 partition of bfv_mars_parted_t1 for values from (current_timestamp) to (maxvalue);
NOTICE:  table has parent, setting distribution columns to match parent table
insert into bfv_mars_parted_t1 values (current_timestamp);
select count(*) from bfv_mars_parted_t1;
 count 
-------
     1
(1 row)

