--
-- Many features are disabled in MARS, some of them are unneeded by MARS, some
-- of them will be supported in the future.
--
-- start_ignore
create extension if not exists mars;
-- end_ignore
--
-- VACUUM is not supported by MARS, and is usually unnecessary by MARS
--
\set tname test_mars_unsupport_vacuum
drop table if exists :tname;
create table :tname (c1 int, c2 int, c3 int)
  using mars distributed by (c1);
vacuum :tname;
ERROR:  mars: VACUUM is not needed for mars tables (vacuum.c:2203)
--
-- ALTER TABLE column related subcmds are not supported by MARS
--
-- 1) a single table
\set tname test_mars_unsupport_alter_table_t1
drop table if exists :tname;
create table :tname (c1 int, c2 int, c3 int)
  using mars distributed by (c1);
-- ADD COLUMN is not supported
alter table :tname add column c4 int;
ERROR:  mars: cannot add column to mars table (tablecmds.c:6974)
-- DROP COLUMN is not supported
alter table :tname drop column c3;
ERROR:  mars: cannot drop column from mars table (tablecmds.c:8634)
-- ALTER COLUMN TYPE is not supported
alter table :tname alter column c3 type bigint;
ERROR:  mars: cannot alter column type of mars table (tablecmds.c:12431)
-- ALTER COLUMN SET/DROP NOT NULL, etc., are supported
alter table :tname alter column c3 set not null;
alter table :tname alter column c3 drop not null;
-- 2) partition table with greenplum syntax
\set tname test_mars_unsupport_alter_table_t2
drop table if exists :tname;
create table :tname (c1 int, c2 int, c3 int)
  using mars distributed by (c1)
  partition by range(c2) (start(0) end(1) every(1));
-- ADD COLUMN is not supported
alter table :tname add column c4 int;
ERROR:  mars: cannot add column to mars table (tablecmds.c:6974)
-- DROP COLUMN is not supported
alter table :tname drop column c3;
ERROR:  mars: cannot drop column from mars table (tablecmds.c:8634)
-- ALTER COLUMN TYPE is not supported
alter table :tname alter column c3 type bigint;
ERROR:  mars: cannot alter column type of mars table (tablecmds.c:12431)
-- ALTER COLUMN SET/DROP NOT NULL, etc., are supported
alter table :tname alter column c3 set not null;
alter table :tname alter column c3 drop not null;
-- 3) partition table with postgres syntax
\set tname test_mars_unsupport_alter_table_t3
\set pname test_mars_unsupport_alter_table_t3_p1
drop table if exists :tname;
create table :tname (c1 int, c2 int, c3 int)
  distributed by (c1)
  partition by range(c2);
create table :pname
  partition of :tname
  for values from (0) to (1)
  using mars;
-- ADD COLUMN is not supported
alter table :tname add column c4 int;
ERROR:  mars: cannot add column to mars table (tablecmds.c:6974)
-- DROP COLUMN is not supported
alter table :tname drop column c3;
ERROR:  mars: cannot drop column from mars table (tablecmds.c:8634)
-- ALTER COLUMN TYPE is not supported
alter table :tname alter column c3 type bigint;
ERROR:  mars: cannot alter column type of mars table (tablecmds.c:12431)
-- ALTER COLUMN SET/DROP NOT NULL, etc., are supported
alter table :tname alter column c3 set not null;
alter table :tname alter column c3 drop not null;
--
-- MARS does not allow concurrent INSERT
--
\set tname test_mars_unsupport_concurrent_insert
\set tnamestr '''' :tname ''''
drop table if exists :tname;
create table :tname (c1 int, c2 int, c3 int) using mars distributed by (c1);
begin;
	insert into :tname values (1, 1, 1);
	-- we should have acquired the ExclusiveLock lock
	select mode, granted from pg_locks
	 where relation = :tnamestr::regclass
	   and mode = 'ExclusiveLock'
	   and gp_segment_id = -1;
     mode      | granted 
---------------+---------
 ExclusiveLock | t
(1 row)

abort;
--
-- MARS does not inheritance
--
-- update: we have fixed it, so re-enabled.
--
\set tname test_mars_unsupport_inherit
\set tnamechild test_mars_unsupport_inherit_child
drop table if exists :tname;
create table :tname (c1 int, c2 int, c3 int) using mars distributed by (c1);
create table :tnamechild () inherits (:tname) using mars distributed by (c1);
insert into :tname values (1, 2, 3);
insert into :tnamechild values (4, 5, 6);
explain (costs off)
select sum(c1), count(c2), min(c3) from :tname;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Finalize Aggregate
   ->  Gather Motion 1:1  (slice1; segments: 1)
         ->  Partial Aggregate
               ->  Append
                     ->  Seq Scan on test_mars_unsupport_inherit
                     ->  Seq Scan on test_mars_unsupport_inherit_child
 Optimizer: Postgres query optimizer
(7 rows)

select sum(c1), count(c2), min(c3) from :tname;
 sum | count | min 
-----+-------+-----
   5 |     2 |   3
(1 row)

explain (costs off)
select sum(c1), count(c2), min(c3) from :tnamechild;
                   QUERY PLAN                   
------------------------------------------------
 Finalize Aggregate
   ->  Gather Motion 1:1  (slice1; segments: 1)
         ->  Custom Scan (MarsAggScan)
 Optimizer: Postgres query optimizer
(4 rows)

select sum(c1), count(c2), min(c3) from :tnamechild;
 sum | count | min 
-----+-------+-----
   4 |     1 |   6
(1 row)

drop table :tname cascade;
NOTICE:  drop cascades to table test_mars_unsupport_inherit_child
create table :tname (tag int, tz timestamp, col1 int) using mars with (tagkey="tag", timekey="tz", timebucket="1 hour");
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'tag' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
explain select time_bucket('90 mins', tz) as tb from :tname order by tb;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=477.28..728.03 rows=17700 width=8)
   Merge Key: (time_bucket('@ 1 hour 30 mins'::interval, tz))
   ->  Sort  (cost=477.28..492.03 rows=5900 width=8)
         Sort Key: (time_bucket('@ 1 hour 30 mins'::interval, tz))
         ->  Seq Scan on test_mars_unsupport_inherit  (cost=0.00..107.75 rows=5900 width=8)
 Optimizer: Postgres query optimizer
(6 rows)

explain select time_bucket('60 mins', tz) as tb from :tname order by tb;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..298.48 rows=17700 width=8)
   Merge Key: (time_bucket('@ 1 hour'::interval, tz))
   ->  Custom Scan (MarsSortScan) on test_mars_unsupport_inherit  (cost=0.00..62.48 rows=5900 width=8)
 Optimizer: Postgres query optimizer
(4 rows)

explain select time_bucket('90 mins', tz) as tb from :tname order by time_bucket('60 mins', tz);
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..313.23 rows=17700 width=16)
   Merge Key: (time_bucket('@ 1 hour'::interval, tz))
   ->  Custom Scan (MarsSortScan) on test_mars_unsupport_inherit  (cost=0.00..77.23 rows=5900 width=16)
 Optimizer: Postgres query optimizer
(4 rows)

-- using local_order, we still can give ts order
explain select * from :tname order by tz;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..283.73 rows=17700 width=16)
   Merge Key: tz
   ->  Custom Scan (MarsSortScan) on test_mars_unsupport_inherit  (cost=0.00..47.73 rows=5900 width=16)
 Optimizer: Postgres query optimizer
(4 rows)

explain select * from :tname order by tag, tz;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..283.73 rows=17700 width=16)
   Merge Key: tag, tz
   ->  Custom Scan (MarsSortScan) on test_mars_unsupport_inherit  (cost=0.00..47.73 rows=5900 width=16)
 Optimizer: Postgres query optimizer
(4 rows)

drop table :tname;
create table :tname (tag int, tz timestamp, col1 int) using mars with (group_col_="{tag}", group_param_col_="{tz in 1 hour}");
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'tag' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- without local_order we can promise tb order
explain select time_bucket('90 mins', tz) as tb from :tname order by tb;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=477.28..728.03 rows=17700 width=8)
   Merge Key: (time_bucket('@ 1 hour 30 mins'::interval, tz))
   ->  Sort  (cost=477.28..492.03 rows=5900 width=8)
         Sort Key: (time_bucket('@ 1 hour 30 mins'::interval, tz))
         ->  Seq Scan on test_mars_unsupport_inherit  (cost=0.00..107.75 rows=5900 width=8)
 Optimizer: Postgres query optimizer
(6 rows)

explain select time_bucket('60 mins', tz) as tb from :tname order by tb;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..298.48 rows=17700 width=8)
   Merge Key: (time_bucket('@ 1 hour'::interval, tz))
   ->  Custom Scan (MarsSortScan) on test_mars_unsupport_inherit  (cost=0.00..62.48 rows=5900 width=8)
 Optimizer: Postgres query optimizer
(4 rows)

explain select time_bucket('90 mins', tz) as tb from :tname order by time_bucket('60 mins', tz);
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..313.23 rows=17700 width=16)
   Merge Key: (time_bucket('@ 1 hour'::interval, tz))
   ->  Custom Scan (MarsSortScan) on test_mars_unsupport_inherit  (cost=0.00..77.23 rows=5900 width=16)
 Optimizer: Postgres query optimizer
(4 rows)

-- without local_order can not give ts order
explain select * from :tname order by tz;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=462.53..713.28 rows=17700 width=16)
   Merge Key: tz
   ->  Sort  (cost=462.53..477.28 rows=5900 width=16)
         Sort Key: tz
         ->  Seq Scan on test_mars_unsupport_inherit  (cost=0.00..93.00 rows=5900 width=16)
 Optimizer: Postgres query optimizer
(6 rows)

explain select * from :tname order by tag, tz;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=462.53..713.28 rows=17700 width=16)
   Merge Key: tag, tz
   ->  Sort  (cost=462.53..477.28 rows=5900 width=16)
         Sort Key: tag, tz
         ->  Seq Scan on test_mars_unsupport_inherit  (cost=0.00..93.00 rows=5900 width=16)
 Optimizer: Postgres query optimizer
(6 rows)

drop table :tname;
