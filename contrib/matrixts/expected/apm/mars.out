----------------------------------------------------------
-- Tests for time-series to mars policy functions
--   * apm_list_partition_with_am
--   * apm_expired_with_am_set
----------------------------------------------------------
-- start_ignore
CREATE EXTENSION matrixts;
ERROR:  extension "matrixts" already exists
CREATE EXTENSION mars;
SET enable_mergejoin TO off;
SET enable_nestloop TO off;
SET enable_parallel_mode TO off;
SET gp_enable_multiphase_agg TO off;
SET optimizer TO off;
CREATE SCHEMA IF NOT EXISTS apm_test;
NOTICE:  schema "apm_test" already exists, skipping
SET matrix.ts_guc_apm_allow_dml TO ON;
TRUNCATE matrixts_internal.apm_operation_log;
TRUNCATE matrixts_internal.apm_rel_policy;
TRUNCATE matrixts_internal.apm_rel_policy_action;
SET matrix.ts_guc_apm_allow_dml TO OFF;
-- end_ignore
------------------------------------
---- apm_list_partition_with_am ----
------------------------------------
-- start_ignore
DROP TABLE IF EXISTS apm_test.sales;
CREATE TABLE apm_test.sales (id int, year int, qtr int, day int, region text)
DISTRIBUTED BY (id)
PARTITION BY RANGE (year)
(PARTITION yr START (2010) END (2014) EVERY (1));
-- end_ignore
SELECT
    root_reloid IS NULL AS root_reloid
  , root_relname
  , parent_reloid IS NULL AS parent_reloid
  , parent_relname
  , reloid IS NULL AS reloid
  , relname
  , partitiontype
  , partitionlevel
  , partitionisdefault
  , partitionboundary
  , addopt
FROM matrixts_internal.apm_list_partition_with_am('apm_test.sales'::regclass, NULL)
ORDER BY relname;
 root_reloid | root_relname | parent_reloid | parent_relname | reloid |     relname      | partitiontype | partitionlevel | partitionisdefault |        partitionboundary         |       addopt        
-------------+--------------+---------------+----------------+--------+------------------+---------------+----------------+--------------------+----------------------------------+---------------------
 f           | sales        | t             |                | f      | sales            |               |              0 | f                  |                                  | 
 f           | sales        | f             | sales          | f      | sales_1_prt_yr_1 | range         |              1 | f                  | FOR VALUES FROM (2010) TO (2011) | {"storage": "heap"}
 f           | sales        | f             | sales          | f      | sales_1_prt_yr_2 | range         |              1 | f                  | FOR VALUES FROM (2011) TO (2012) | {"storage": "heap"}
 f           | sales        | f             | sales          | f      | sales_1_prt_yr_3 | range         |              1 | f                  | FOR VALUES FROM (2012) TO (2013) | {"storage": "heap"}
 f           | sales        | f             | sales          | f      | sales_1_prt_yr_4 | range         |              1 | f                  | FOR VALUES FROM (2013) TO (2014) | {"storage": "heap"}
(5 rows)

-- start_ignore
DROP TABLE IF EXISTS apm_test.sales2;
CREATE TABLE apm_test.sales2 (trans_id int, date date, amount
decimal(9,2), region text)
DISTRIBUTED BY (trans_id)
PARTITION BY RANGE (date)
SUBPARTITION BY LIST (region)
SUBPARTITION TEMPLATE
( SUBPARTITION usa VALUES ('usa'),
  SUBPARTITION asia VALUES ('asia'),
  SUBPARTITION europe VALUES ('europe'),
  DEFAULT SUBPARTITION other_regions)
  (START (date '2011-01-01') INCLUSIVE
   END (date '2012-01-01') EXCLUSIVE
   EVERY (INTERVAL '1 month'),
   DEFAULT PARTITION outlying_dates);
-- end_ignore
SELECT
    root_reloid IS NULL AS root_reloid
  , root_relname
  , parent_reloid IS NULL AS parent_reloid
  , parent_relname
  , reloid IS NULL AS reloid
  , relname
  , partitiontype
  , partitionlevel
  , partitionisdefault
  , partitionboundary
  , addopt
FROM matrixts_internal.apm_list_partition_with_am('apm_test.sales2'::regclass, NULL)
ORDER BY relname;
 root_reloid | root_relname | parent_reloid |       parent_relname        | reloid |                     relname                     | partitiontype | partitionlevel | partitionisdefault |                partitionboundary                 |       addopt        
-------------+--------------+---------------+-----------------------------+--------+-------------------------------------------------+---------------+----------------+--------------------+--------------------------------------------------+---------------------
 f           | sales2       | t             |                             | f      | sales2                                          |               |              0 | f                  |                                                  | 
 f           | sales2       | f             | sales2                      | f      | sales2_1_prt_10                                 | range         |              1 | f                  | FOR VALUES FROM ('09-01-2011') TO ('10-01-2011') | 
 f           | sales2       | f             | sales2_1_prt_10             | f      | sales2_1_prt_10_2_prt_asia                      | list          |              2 | f                  | FOR VALUES IN ('asia')                           | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_10             | f      | sales2_1_prt_10_2_prt_europe                    | list          |              2 | f                  | FOR VALUES IN ('europe')                         | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_10             | f      | sales2_1_prt_10_2_prt_other_regions             | list          |              2 | t                  | DEFAULT                                          | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_10             | f      | sales2_1_prt_10_2_prt_usa                       | list          |              2 | f                  | FOR VALUES IN ('usa')                            | {"storage": "heap"}
 f           | sales2       | f             | sales2                      | f      | sales2_1_prt_11                                 | range         |              1 | f                  | FOR VALUES FROM ('10-01-2011') TO ('11-01-2011') | 
 f           | sales2       | f             | sales2_1_prt_11             | f      | sales2_1_prt_11_2_prt_asia                      | list          |              2 | f                  | FOR VALUES IN ('asia')                           | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_11             | f      | sales2_1_prt_11_2_prt_europe                    | list          |              2 | f                  | FOR VALUES IN ('europe')                         | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_11             | f      | sales2_1_prt_11_2_prt_other_regions             | list          |              2 | t                  | DEFAULT                                          | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_11             | f      | sales2_1_prt_11_2_prt_usa                       | list          |              2 | f                  | FOR VALUES IN ('usa')                            | {"storage": "heap"}
 f           | sales2       | f             | sales2                      | f      | sales2_1_prt_12                                 | range         |              1 | f                  | FOR VALUES FROM ('11-01-2011') TO ('12-01-2011') | 
 f           | sales2       | f             | sales2_1_prt_12             | f      | sales2_1_prt_12_2_prt_asia                      | list          |              2 | f                  | FOR VALUES IN ('asia')                           | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_12             | f      | sales2_1_prt_12_2_prt_europe                    | list          |              2 | f                  | FOR VALUES IN ('europe')                         | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_12             | f      | sales2_1_prt_12_2_prt_other_regions             | list          |              2 | t                  | DEFAULT                                          | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_12             | f      | sales2_1_prt_12_2_prt_usa                       | list          |              2 | f                  | FOR VALUES IN ('usa')                            | {"storage": "heap"}
 f           | sales2       | f             | sales2                      | f      | sales2_1_prt_13                                 | range         |              1 | f                  | FOR VALUES FROM ('12-01-2011') TO ('01-01-2012') | 
 f           | sales2       | f             | sales2_1_prt_13             | f      | sales2_1_prt_13_2_prt_asia                      | list          |              2 | f                  | FOR VALUES IN ('asia')                           | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_13             | f      | sales2_1_prt_13_2_prt_europe                    | list          |              2 | f                  | FOR VALUES IN ('europe')                         | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_13             | f      | sales2_1_prt_13_2_prt_other_regions             | list          |              2 | t                  | DEFAULT                                          | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_13             | f      | sales2_1_prt_13_2_prt_usa                       | list          |              2 | f                  | FOR VALUES IN ('usa')                            | {"storage": "heap"}
 f           | sales2       | f             | sales2                      | f      | sales2_1_prt_2                                  | range         |              1 | f                  | FOR VALUES FROM ('01-01-2011') TO ('02-01-2011') | 
 f           | sales2       | f             | sales2_1_prt_2              | f      | sales2_1_prt_2_2_prt_asia                       | list          |              2 | f                  | FOR VALUES IN ('asia')                           | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_2              | f      | sales2_1_prt_2_2_prt_europe                     | list          |              2 | f                  | FOR VALUES IN ('europe')                         | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_2              | f      | sales2_1_prt_2_2_prt_other_regions              | list          |              2 | t                  | DEFAULT                                          | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_2              | f      | sales2_1_prt_2_2_prt_usa                        | list          |              2 | f                  | FOR VALUES IN ('usa')                            | {"storage": "heap"}
 f           | sales2       | f             | sales2                      | f      | sales2_1_prt_3                                  | range         |              1 | f                  | FOR VALUES FROM ('02-01-2011') TO ('03-01-2011') | 
 f           | sales2       | f             | sales2_1_prt_3              | f      | sales2_1_prt_3_2_prt_asia                       | list          |              2 | f                  | FOR VALUES IN ('asia')                           | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_3              | f      | sales2_1_prt_3_2_prt_europe                     | list          |              2 | f                  | FOR VALUES IN ('europe')                         | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_3              | f      | sales2_1_prt_3_2_prt_other_regions              | list          |              2 | t                  | DEFAULT                                          | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_3              | f      | sales2_1_prt_3_2_prt_usa                        | list          |              2 | f                  | FOR VALUES IN ('usa')                            | {"storage": "heap"}
 f           | sales2       | f             | sales2                      | f      | sales2_1_prt_4                                  | range         |              1 | f                  | FOR VALUES FROM ('03-01-2011') TO ('04-01-2011') | 
 f           | sales2       | f             | sales2_1_prt_4              | f      | sales2_1_prt_4_2_prt_asia                       | list          |              2 | f                  | FOR VALUES IN ('asia')                           | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_4              | f      | sales2_1_prt_4_2_prt_europe                     | list          |              2 | f                  | FOR VALUES IN ('europe')                         | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_4              | f      | sales2_1_prt_4_2_prt_other_regions              | list          |              2 | t                  | DEFAULT                                          | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_4              | f      | sales2_1_prt_4_2_prt_usa                        | list          |              2 | f                  | FOR VALUES IN ('usa')                            | {"storage": "heap"}
 f           | sales2       | f             | sales2                      | f      | sales2_1_prt_5                                  | range         |              1 | f                  | FOR VALUES FROM ('04-01-2011') TO ('05-01-2011') | 
 f           | sales2       | f             | sales2_1_prt_5              | f      | sales2_1_prt_5_2_prt_asia                       | list          |              2 | f                  | FOR VALUES IN ('asia')                           | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_5              | f      | sales2_1_prt_5_2_prt_europe                     | list          |              2 | f                  | FOR VALUES IN ('europe')                         | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_5              | f      | sales2_1_prt_5_2_prt_other_regions              | list          |              2 | t                  | DEFAULT                                          | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_5              | f      | sales2_1_prt_5_2_prt_usa                        | list          |              2 | f                  | FOR VALUES IN ('usa')                            | {"storage": "heap"}
 f           | sales2       | f             | sales2                      | f      | sales2_1_prt_6                                  | range         |              1 | f                  | FOR VALUES FROM ('05-01-2011') TO ('06-01-2011') | 
 f           | sales2       | f             | sales2_1_prt_6              | f      | sales2_1_prt_6_2_prt_asia                       | list          |              2 | f                  | FOR VALUES IN ('asia')                           | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_6              | f      | sales2_1_prt_6_2_prt_europe                     | list          |              2 | f                  | FOR VALUES IN ('europe')                         | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_6              | f      | sales2_1_prt_6_2_prt_other_regions              | list          |              2 | t                  | DEFAULT                                          | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_6              | f      | sales2_1_prt_6_2_prt_usa                        | list          |              2 | f                  | FOR VALUES IN ('usa')                            | {"storage": "heap"}
 f           | sales2       | f             | sales2                      | f      | sales2_1_prt_7                                  | range         |              1 | f                  | FOR VALUES FROM ('06-01-2011') TO ('07-01-2011') | 
 f           | sales2       | f             | sales2_1_prt_7              | f      | sales2_1_prt_7_2_prt_asia                       | list          |              2 | f                  | FOR VALUES IN ('asia')                           | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_7              | f      | sales2_1_prt_7_2_prt_europe                     | list          |              2 | f                  | FOR VALUES IN ('europe')                         | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_7              | f      | sales2_1_prt_7_2_prt_other_regions              | list          |              2 | t                  | DEFAULT                                          | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_7              | f      | sales2_1_prt_7_2_prt_usa                        | list          |              2 | f                  | FOR VALUES IN ('usa')                            | {"storage": "heap"}
 f           | sales2       | f             | sales2                      | f      | sales2_1_prt_8                                  | range         |              1 | f                  | FOR VALUES FROM ('07-01-2011') TO ('08-01-2011') | 
 f           | sales2       | f             | sales2_1_prt_8              | f      | sales2_1_prt_8_2_prt_asia                       | list          |              2 | f                  | FOR VALUES IN ('asia')                           | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_8              | f      | sales2_1_prt_8_2_prt_europe                     | list          |              2 | f                  | FOR VALUES IN ('europe')                         | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_8              | f      | sales2_1_prt_8_2_prt_other_regions              | list          |              2 | t                  | DEFAULT                                          | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_8              | f      | sales2_1_prt_8_2_prt_usa                        | list          |              2 | f                  | FOR VALUES IN ('usa')                            | {"storage": "heap"}
 f           | sales2       | f             | sales2                      | f      | sales2_1_prt_9                                  | range         |              1 | f                  | FOR VALUES FROM ('08-01-2011') TO ('09-01-2011') | 
 f           | sales2       | f             | sales2_1_prt_9              | f      | sales2_1_prt_9_2_prt_asia                       | list          |              2 | f                  | FOR VALUES IN ('asia')                           | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_9              | f      | sales2_1_prt_9_2_prt_europe                     | list          |              2 | f                  | FOR VALUES IN ('europe')                         | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_9              | f      | sales2_1_prt_9_2_prt_other_regions              | list          |              2 | t                  | DEFAULT                                          | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_9              | f      | sales2_1_prt_9_2_prt_usa                        | list          |              2 | f                  | FOR VALUES IN ('usa')                            | {"storage": "heap"}
 f           | sales2       | f             | sales2                      | f      | sales2_1_prt_outlying_dates                     | range         |              1 | t                  | DEFAULT                                          | 
 f           | sales2       | f             | sales2_1_prt_outlying_dates | f      | sales2_1_prt_outlying_dates_2_prt_asia          | list          |              2 | f                  | FOR VALUES IN ('asia')                           | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_outlying_dates | f      | sales2_1_prt_outlying_dates_2_prt_europe        | list          |              2 | f                  | FOR VALUES IN ('europe')                         | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_outlying_dates | f      | sales2_1_prt_outlying_dates_2_prt_other_regions | list          |              2 | t                  | DEFAULT                                          | {"storage": "heap"}
 f           | sales2       | f             | sales2_1_prt_outlying_dates | f      | sales2_1_prt_outlying_dates_2_prt_usa           | list          |              2 | f                  | FOR VALUES IN ('usa')                            | {"storage": "heap"}
(66 rows)

---------------------------------
----   apm_expired_with_am   ----
---------------------------------
-- start_ignore
DROP TABLE IF EXISTS apm_test.expired_am;
NOTICE:  table "expired_am" does not exist, skipping
CREATE TABLE apm_test.expired_am (ts timestamp with time zone, region text)
DISTRIBUTED BY (region) PARTITION BY RANGE (ts)
( PARTITION yr START (now() - '10 year'::interval) END (now() - '5 year'::interval) EVERY ('1 year') ) ;
-- end_ignore
-- should return '{NULL}' as partition boundary totally after now - 1 year and storage is not heap
SELECT matrixts_internal.apm_expired_with_am(
    '2020-01-01 11:22:33'::timestamptz
  , 'apm_test.expired_am_1_prt_yr_2'::regclass
  , 'apm_test.expired_am'::regclass
  , 'apm_test.expired_am'::regclass
  , (ARRAY(SELECT lp FROM matrixts_internal.apm_list_partition_with_am('apm_test.expired_am'::regclass, NULL) lp WHERE reloid = 'apm_test.expired_am_1_prt_yr_2'::regclass))[1]
  , ARRAY(SELECT matrixts_internal.apm_list_partition_with_am('apm_test.expired_am'::regclass, NULL))
  , '{ "after": "1 year", "storage_is_not": "mars" }'
);
 apm_expired_with_am 
---------------------
 {NULL}
(1 row)

-- should return NULL as partition boundary is not expired
SELECT matrixts_internal.apm_expired_with_am(
    '2020-01-01 11:22:33'::timestamptz
  , 'apm_test.expired_am_1_prt_yr_2'::regclass
  , 'apm_test.expired_am'::regclass
  , 'apm_test.expired_am'::regclass
  , (ARRAY(SELECT lp FROM matrixts_internal.apm_list_partition_with_am('apm_test.expired_am'::regclass, NULL) lp WHERE reloid = 'apm_test.expired_am_1_prt_yr_2'::regclass))[1]
  , ARRAY(SELECT matrixts_internal.apm_list_partition_with_am('apm_test.expired_am'::regclass, NULL))
  , '{ "after": "9 year", "storage_is_not": "mars" }'
);
 apm_expired_with_am 
---------------------
 
(1 row)

-- should return NULL as storage is same
SELECT matrixts_internal.apm_expired_with_am(
    '2020-01-01 11:22:33'::timestamptz
  , 'apm_test.expired_am_1_prt_yr_2'::regclass
  , 'apm_test.expired_am'::regclass
  , 'apm_test.expired_am'::regclass
  , (ARRAY(SELECT lp FROM matrixts_internal.apm_list_partition_with_am('apm_test.expired_am'::regclass, NULL) lp WHERE reloid = 'apm_test.expired_am_1_prt_yr_2'::regclass))[1]
  , ARRAY(SELECT matrixts_internal.apm_list_partition_with_am('apm_test.expired_am'::regclass, NULL))
  , '{ "after": "1 year", "storage_is_not": "heap" }'
);
 apm_expired_with_am 
---------------------
 
(1 row)

-------------------------------------
---- apm_mars_append_partition   ----
---- apm_mars_compress_partition ----
-------------------------------------
DROP TABLE IF EXISTS apm_test."FoO_";
NOTICE:  table "FoO_" does not exist, skipping
CREATE TABLE apm_test."FoO_" ("tag@" int, "timestamp" timestamp, measurement float)
DISTRIBUTED BY ("tag@") PARTITION BY RANGE("timestamp");
SELECT mars.build_timeseries_table('apm_test."FoO_"','tagkey="tag@", timekey="timestamp", timebucket="1 hour"', true);
 build_timeseries_table 
------------------------
 t
(1 row)

SELECT matrixts_internal.apm_mars_append_partition(
    '2021-5-30 11:22:33.54321'::timestamptz
  , 'apm_test."FoO_"'::regclass
  , NULL
  , 'apm_test."FoO_"'::regclass
  , (ARRAY(SELECT lp FROM matrixts_internal.apm_generic_list_partitions('apm_test."FoO_"'::regclass, NULL) lp WHERE reloid = root_reloid))[1]
  , ARRAY(SELECT matrixts_internal.apm_generic_list_partitions('apm_test."FoO_"'::regclass, NULL))
  , '{"period":"1 week"}'::json
  , (SELECT matrixts_internal.apm_generic_incoming(
        '2021-5-30 11:22:33.54321'::timestamptz
      , 'apm_test."FoO_"'::regclass
      , NULL
      , 'apm_test."FoO_"'::regclass
      , (ARRAY(SELECT lp FROM matrixts_internal.apm_generic_list_partitions('apm_test."FoO_"'::regclass, NULL) lp WHERE reloid = root_reloid))[1]
      , ARRAY(SELECT matrixts_internal.apm_generic_list_partitions('apm_test."FoO_"'::regclass, NULL))
      , '{"before":"3 days"}'::json
    ))
);
NOTICE:  table has parent, setting distribution columns to match parent table
NOTICE:  table has parent, setting distribution columns to match parent table
 apm_mars_append_partition 
---------------------------
 t
(1 row)

SELECT relname, relnsp, addopt FROM matrixts_internal.apm_list_partition_with_am('apm_test."FoO_"', NULL);
   relname    |  relnsp  |       addopt        
--------------+----------+---------------------
 FoO_         | apm_test | 
 FoO__1_prt_1 | apm_test | {"storage": "heap"}
 FoO__1_prt_2 | apm_test | {"storage": "heap"}
(3 rows)

SELECT matrixts_internal.apm_mars_compress_partition(NULL, 'apm_test."FoO__1_prt_1"', NULL, NULL, NULL, NULL, NULL, '{}'::matrixts_internal._apm_boundary);
 apm_mars_compress_partition 
-----------------------------
 t
(1 row)

-- do not compress if check_res is NULL
SELECT matrixts_internal.apm_mars_compress_partition(NULL, 'apm_test."FoO__1_prt_2"', NULL, NULL, NULL, NULL, NULL, NULL);
ERROR:  check_res must not be NULL
CONTEXT:  PL/pgSQL function matrixts_internal.apm_mars_compress_partition(timestamp with time zone,regclass,regclass,regclass,matrixts_internal.apm_partition_item,matrixts_internal.apm_partition_item[],json,matrixts_internal.apm_boundary[]) line 19 at RAISE
SELECT relname, relnsp, addopt FROM matrixts_internal.apm_list_partition_with_am('apm_test."FoO_"', NULL);
   relname    |  relnsp  |       addopt        
--------------+----------+---------------------
 FoO_         | apm_test | 
 FoO__1_prt_2 | apm_test | {"storage": "heap"}
 FoO__1_mars1 | apm_test | {"storage": "mars"}
(3 rows)

SELECT mars.destroy_timeseries_table('apm_test."FoO_"'::regclass);
 destroy_timeseries_table 
--------------------------
 t
(1 row)

DROP TABLE IF EXISTS apm_test."'""'|!@#$%^&为*()_+-斯=[]{}卡\;':蒂"",.<>/ 	?献上心脏！P两面包";
NOTICE:  identifier "'"'|!@#$%^&为*()_+-斯=[]{}卡\;':蒂",.<>/ 	?献上心脏！P两面包" will be truncated to "'"'|!@#$%^&为*()_+-斯=[]{}卡\;':蒂",.<>/ 	?献上心脏！P"
NOTICE:  table "'"'|!@#$%^&为*()_+-斯=[]{}卡\;':蒂",.<>/ 	?献上心脏！P" does not exist, skipping
CREATE TABLE apm_test."'""'|!@#$%^&为*()_+-斯=[]{}卡\;':蒂"",.<>/ 	?献上心脏！P两面包" ("tag""@" int, "timestamp" timestamp, measurement float)
DISTRIBUTED BY ("tag""@") PARTITION BY RANGE ("timestamp");
NOTICE:  identifier "'"'|!@#$%^&为*()_+-斯=[]{}卡\;':蒂",.<>/ 	?献上心脏！P两面包" will be truncated to "'"'|!@#$%^&为*()_+-斯=[]{}卡\;':蒂",.<>/ 	?献上心脏！P"
SELECT mars.build_timeseries_table(
  '"apm_test"."''""''|!@#$%^&为*()_+-斯=[]{}卡\;'':蒂"",.<>/ 	?献上心脏！P两面包"',
  'tagkey="tag""@", timekey="timestamp", timebucket="1 hour"', true);
 build_timeseries_table 
------------------------
 t
(1 row)

SELECT matrixts_internal.apm_mars_append_partition(
    '2021-5-30 11:22:33.54321'::timestamptz
  , '"apm_test"."''""''|!@#$%^&为*()_+-斯=[]{}卡\;'':蒂"",.<>/ 	?献上心脏！P两面包"'::regclass
  , NULL
  , '"apm_test"."''""''|!@#$%^&为*()_+-斯=[]{}卡\;'':蒂"",.<>/ 	?献上心脏！P两面包"'::regclass
  , (ARRAY(SELECT lp FROM matrixts_internal.apm_generic_list_partitions('"apm_test"."''""''|!@#$%^&为*()_+-斯=[]{}卡\;'':蒂"",.<>/ 	?献上心脏！P两面包"'::regclass, NULL) lp WHERE reloid = root_reloid))[1]
  , ARRAY(SELECT matrixts_internal.apm_generic_list_partitions('"apm_test"."''""''|!@#$%^&为*()_+-斯=[]{}卡\;'':蒂"",.<>/ 	?献上心脏！P两面包"'::regclass, NULL))
  , '{"period":"1 week"}'::json
  , (SELECT matrixts_internal.apm_generic_incoming(
        '2021-5-30 11:22:33.54321'::timestamptz
      , '"apm_test"."''""''|!@#$%^&为*()_+-斯=[]{}卡\;'':蒂"",.<>/ 	?献上心脏！P两面包"'::regclass
      , NULL
      , '"apm_test"."''""''|!@#$%^&为*()_+-斯=[]{}卡\;'':蒂"",.<>/ 	?献上心脏！P两面包"'::regclass
      , (ARRAY(SELECT lp FROM matrixts_internal.apm_generic_list_partitions('"apm_test"."''""''|!@#$%^&为*()_+-斯=[]{}卡\;'':蒂"",.<>/ 	?献上心脏！P两面包"'::regclass, NULL) lp WHERE reloid = root_reloid))[1]
      , ARRAY(SELECT matrixts_internal.apm_generic_list_partitions('"apm_test"."''""''|!@#$%^&为*()_+-斯=[]{}卡\;'':蒂"",.<>/ 	?献上心脏！P两面包"'::regclass, NULL))
      , '{"before":"3 days"}'::json
    ))
);
NOTICE:  table has parent, setting distribution columns to match parent table
NOTICE:  table has parent, setting distribution columns to match parent table
 apm_mars_append_partition 
---------------------------
 t
(1 row)

SELECT relname, relnsp, addopt FROM matrixts_internal.apm_list_partition_with_am('"apm_test"."''""''|!@#$%^&为*()_+-斯=[]{}卡\;'':蒂"",.<>/ 	?献上心脏！P两面包"', NULL);
                            relname                            |  relnsp  |       addopt        
---------------------------------------------------------------+----------+---------------------
 '"'|!@#$%^&为*()_+-斯=[]{}卡\;':蒂",.<>/        ?献上心脏！P  | apm_test | 
 '"'|!@#$%^&为*()_+-斯=[]{}卡\;':蒂",.<>/        ?献上_1_prt_1 | apm_test | {"storage": "heap"}
 '"'|!@#$%^&为*()_+-斯=[]{}卡\;':蒂",.<>/        ?献上_1_prt_2 | apm_test | {"storage": "heap"}
(3 rows)

SELECT matrixts_internal.apm_mars_compress_partition(NULL, '"apm_test"."''""''|!@#$%^&为*()_+-斯=[]{}卡\;'':蒂"",.<>/ 	?献上心_1_prt_1"', NULL, NULL, NULL, NULL, NULL, '{}'::matrixts_internal._apm_boundary);
ERROR:  relation "apm_test.'"'|!@#$%^&为*()_+-斯=[]{}卡\;':蒂",.<>/ 	?献上心_1_prt_" does not exist
LINE 1: ...trixts_internal.apm_mars_compress_partition(NULL, '"apm_test...
                                                             ^
-- do not compress if check_res is NULL
SELECT matrixts_internal.apm_mars_compress_partition(NULL, '"apm_test"."''""''|!@#$%^&为*()_+-斯=[]{}卡\;'':蒂"",.<>/ 	?献上心_1_prt_2"', NULL, NULL, NULL, NULL, NULL, NULL);
ERROR:  relation "apm_test.'"'|!@#$%^&为*()_+-斯=[]{}卡\;':蒂",.<>/ 	?献上心_1_prt_" does not exist
LINE 1: ...trixts_internal.apm_mars_compress_partition(NULL, '"apm_test...
                                                             ^
SELECT relname, relnsp, addopt FROM matrixts_internal.apm_list_partition_with_am('"apm_test"."''""''|!@#$%^&为*()_+-斯=[]{}卡\;'':蒂"",.<>/ 	?献上心脏！P两面包"', NULL);
                            relname                            |  relnsp  |       addopt        
---------------------------------------------------------------+----------+---------------------
 '"'|!@#$%^&为*()_+-斯=[]{}卡\;':蒂",.<>/        ?献上心脏！P  | apm_test | 
 '"'|!@#$%^&为*()_+-斯=[]{}卡\;':蒂",.<>/        ?献上_1_prt_1 | apm_test | {"storage": "heap"}
 '"'|!@#$%^&为*()_+-斯=[]{}卡\;':蒂",.<>/        ?献上_1_prt_2 | apm_test | {"storage": "heap"}
(3 rows)

SELECT mars.destroy_timeseries_table('"apm_test"."''""''|!@#$%^&为*()_+-斯=[]{}卡\;'':蒂"",.<>/ 	?献上心脏！P两面包"'::regclass);
 destroy_timeseries_table 
--------------------------
 t
(1 row)

---------------------------------
---- apm_expired_with_am_set ----
---------------------------------
SHOW matrix.ts_guc_apm_allow_dml;
 matrix.ts_guc_apm_allow_dml 
-----------------------------
 off
(1 row)

-- start_ignore
DROP TABLE IF EXISTS apm_test.expired_am_set;
NOTICE:  table "expired_am_set" does not exist, skipping
CREATE TABLE apm_test.expired_am_set (id int, year int, qtr int, day int, region text)
DISTRIBUTED BY (id) PARTITION BY RANGE (year)
(PARTITION yr START (2010) END (2012) EVERY (1));
TRUNCATE matrixts_internal.apm_operation_log;
TRUNCATE matrixts_internal.apm_rel_policy_action;
-- end_ignore
-- should report error on invalid input
SELECT matrixts_internal.apm_expired_with_am_set(NULL, 1, NULL, NULL);
ERROR:  argument "rel" must not be NULL.
CONTEXT:  PL/pgSQL function matrixts_internal.apm_expired_with_am_set(regclass,integer,text,text) line 10 at RAISE
SELECT matrixts_internal.apm_expired_with_am_set('apm_test.expired_am_set'::regclass, 1, NULL, NULL);
ERROR:  argument "action_name" must not be NULL.
CONTEXT:  PL/pgSQL function matrixts_internal.apm_expired_with_am_set(regclass,integer,text,text) line 13 at RAISE
SELECT matrixts_internal.apm_expired_with_am_set('apm_test.expired_am_set'::regclass, 1, 'fake_action', 'abc');
ERROR:  Invalid argument expression: "abc".
HINT:  Example '{ "after": "7 days", "storage_is_not": "heap" }'
CONTEXT:  PL/pgSQL function matrixts_internal.apm_expired_with_am_set(regclass,integer,text,text) line 30 at RAISE
SELECT matrixts_internal.apm_expired_with_am_set('apm_test.expired_am_set'::regclass, 1, 'fake_action', '{ "after": "bcd" }');
ERROR:  Missing "storage_is_not" expression in "{ "after": "bcd" }".
HINT:  Example '{ "after": "7 days", "storage_is_not": "heap" }'
CONTEXT:  PL/pgSQL function matrixts_internal.apm_expired_with_am_set(regclass,integer,text,text) line 40 at RAISE
SELECT matrixts_internal.apm_expired_with_am_set('apm_test.expired_am_set'::regclass, 1, 'fake_action', '{ "storage_is_not": "def" }');
ERROR:  Missing "after" expression in "{ "storage_is_not": "def" }".
HINT:  Example '{ "after": "7 days", "storage_is_not": "heap" }'
CONTEXT:  PL/pgSQL function matrixts_internal.apm_expired_with_am_set(regclass,integer,text,text) line 35 at RAISE
SELECT matrixts_internal.apm_expired_with_am_set('apm_test.expired_am_set'::regclass, 1, 'fake_action', '{ "after": "efg", "storage_is_not": "xyz" }');
ERROR:  Invalid "after" expression: efg.
HINT:  Example '{ "after": "7 days", "storage_is_not": "heap" }'
CONTEXT:  PL/pgSQL function matrixts_internal.apm_expired_with_am_set(regclass,integer,text,text) line 47 at RAISE
SELECT matrixts_internal.apm_expired_with_am_set('apm_test.expired_am_set'::regclass, 1, 'fake_action', '{ "after": "1 month" }');
ERROR:  Missing "storage_is_not" expression in "{ "after": "1 month" }".
HINT:  Example '{ "after": "7 days", "storage_is_not": "heap" }'
CONTEXT:  PL/pgSQL function matrixts_internal.apm_expired_with_am_set(regclass,integer,text,text) line 40 at RAISE
SELECT reloid::regclass, action, disabled, check_func, check_args, act_func, act_args, version
FROM matrixts_internal.apm_rel_policy_action;
 reloid | action | disabled | check_func | check_args | act_func | act_args | version 
--------+--------+----------+------------+------------+----------+----------+---------
(0 rows)

SELECT username = CURRENT_USER, relname, class_id, class_name, action, operation, mod_field, old_val, new_val
FROM matrixts_internal.apm_operation_log ORDER BY ts;
 ?column? | relname | class_id | class_name | action | operation | mod_field | old_val | new_val 
----------+---------+----------+------------+--------+-----------+-----------+---------+---------
(0 rows)

TRUNCATE matrixts_internal.apm_operation_log;
TRUNCATE matrixts_internal.apm_rel_policy_action;
-- should insert a new entry
SELECT matrixts_internal.apm_expired_with_am_set('apm_test.expired_am_set'::regclass, 1, 'test_split', '{ "after": "1 month", "storage_is_not": "xyz" }');
WARNING:  relation "apm_test.expired_am_set" does not have a policy class to add
 apm_expired_with_am_set 
-------------------------
 
(1 row)

SELECT reloid::regclass, action, disabled, check_func, check_args, act_func, act_args, version
FROM matrixts_internal.apm_rel_policy_action;
         reloid          |   action   | disabled | check_func |                  check_args                   | act_func | act_args | version 
-------------------------+------------+----------+------------+-----------------------------------------------+----------+----------+---------
 apm_test.expired_am_set | test_split |          |            | {"after": "1 month", "storage_is_not": "xyz"} |          |          | 
(1 row)

-- should have reset GUC to false
SHOW matrix.ts_guc_apm_allow_dml;
 matrix.ts_guc_apm_allow_dml 
-----------------------------
 off
(1 row)

-- should append 2 add records to operation log
SELECT username = CURRENT_USER, relname, class_id, class_name, action, operation, mod_field, old_val, new_val
FROM matrixts_internal.apm_operation_log ORDER BY ts;
 ?column? |         relname         | class_id | class_name |   action   | operation | mod_field  | old_val |                    new_val                    
----------+-------------------------+----------+------------+------------+-----------+------------+---------+-----------------------------------------------
 t        | apm_test.expired_am_set |          |            | test_split | add       | check_args |         | {"after": "1 month", "storage_is_not": "xyz"}
(1 row)

-- should update check_args
SELECT matrixts_internal.apm_expired_with_am_set('apm_test.expired_am_set'::regclass, 1, 'test_split', '{ "after": "2 month", "storage_is_not": "abc" }');
WARNING:  relation "apm_test.expired_am_set" does not have a policy class to update
 apm_expired_with_am_set 
-------------------------
 
(1 row)

SELECT reloid::regclass, action, disabled, check_func, check_args, act_func, act_args, version
FROM matrixts_internal.apm_rel_policy_action;
         reloid          |   action   | disabled | check_func |                  check_args                   | act_func | act_args | version 
-------------------------+------------+----------+------------+-----------------------------------------------+----------+----------+---------
 apm_test.expired_am_set | test_split |          |            | {"after": "2 month", "storage_is_not": "abc"} |          |          | 
(1 row)

-- should append 1 mod record to operation log
SELECT username = CURRENT_USER, relname, class_id, class_name, action, operation, mod_field, old_val, new_val
FROM matrixts_internal.apm_operation_log ORDER BY ts;
 ?column? |         relname         | class_id | class_name |   action   | operation | mod_field  |                    old_val                    |                    new_val                    
----------+-------------------------+----------+------------+------------+-----------+------------+-----------------------------------------------+-----------------------------------------------
 t        | apm_test.expired_am_set |          |            | test_split | add       | check_args |                                               | {"after": "1 month", "storage_is_not": "xyz"}
 t        | apm_test.expired_am_set |          |            | test_split | mod       | check_args | {"after": "1 month", "storage_is_not": "xyz"} | {"after": "2 month", "storage_is_not": "abc"}
(2 rows)

-- should delete the entry
SELECT matrixts_internal.apm_expired_with_am_set('apm_test.expired_am_set'::regclass, 1, 'test_split', NULL);
WARNING:  relation "apm_test.expired_am_set" does not have a policy class to delete
 apm_expired_with_am_set 
-------------------------
 
(1 row)

SELECT reloid::regclass, action, disabled, check_func, check_args, act_func, act_args, version
FROM matrixts_internal.apm_rel_policy_action;
 reloid | action | disabled | check_func | check_args | act_func | act_args | version 
--------+--------+----------+------------+------------+----------+----------+---------
(0 rows)

-- should append 1 drop record to operation log
SELECT username = CURRENT_USER, relname, class_id, class_name, action, operation, mod_field, old_val, new_val
FROM matrixts_internal.apm_operation_log ORDER BY ts;
 ?column? |         relname         | class_id | class_name |   action   | operation | mod_field  |                    old_val                    |                    new_val                    
----------+-------------------------+----------+------------+------------+-----------+------------+-----------------------------------------------+-----------------------------------------------
 t        | apm_test.expired_am_set |          |            | test_split | add       | check_args |                                               | {"after": "1 month", "storage_is_not": "xyz"}
 t        | apm_test.expired_am_set |          |            | test_split | mod       | check_args | {"after": "1 month", "storage_is_not": "xyz"} | {"after": "2 month", "storage_is_not": "abc"}
 t        | apm_test.expired_am_set |          |            | test_split | drop      |            |                                               | 
(3 rows)

---------------------------------
---- apm_mars_guard ----
---------------------------------
-- start_ignore
DROP EXTENSION mars CASCADE;
NOTICE:  drop cascades to table apm_test."FoO__1_mars1"
-- end_ignore
DROP TABLE IF EXISTS apm_test."FoO_";
CREATE TABLE apm_test."FoO_" ("tag@" int, "timestamp" timestamp, measurement float)
DISTRIBUTED BY ("tag@") PARTITION BY RANGE("timestamp");
-- should error due to no mars extension
SELECT public.set_policy('apm_test."FoO_"'::regclass, 'mars_time_series');
ERROR:  require "mars" extension to use mars_time_series policy
CONTEXT:  PL/pgSQL function matrixts_internal.apm_mars_guard(regclass,text,jsonb) line 8 at RAISE
SQL statement "SELECT matrixts_internal.apm_mars_guard($1, $2, $3)"
PL/pgSQL function set_policy(regclass,text) line 54 at EXECUTE
-- start_ignore
CREATE EXTENSION mars VERSION '0.1';
-- end_ignore
DROP TABLE IF EXISTS apm_test."FoO_";
CREATE TABLE apm_test."FoO_" ("tag@" int, "timestamp" timestamp, measurement float)
DISTRIBUTED BY ("tag@") PARTITION BY RANGE("timestamp");
-- should error due to mars extension is too old
SELECT public.set_policy('apm_test."FoO_"'::regclass, 'mars_time_series');
ERROR:  extension mars 0.1 is too old to use mars_time_series policy
DETAIL:  ATTENTION: for mars tables created in early version of mars, may need to drop, re-populate those tables after upgrading.
HINT:  upgrade mars with: DROP EXTENSION mars CASCADE; CREATE EXTENSION mars;
CONTEXT:  PL/pgSQL function matrixts_internal.apm_mars_guard(regclass,text,jsonb) line 11 at RAISE
SQL statement "SELECT matrixts_internal.apm_mars_guard($1, $2, $3)"
PL/pgSQL function set_policy(regclass,text) line 54 at EXECUTE
SELECT mars.build_timeseries_table('apm_test."FoO_"','tagkey="tag@", timekey="timestamp", timebucket="1 hour"', true);
ERROR:  schema "mars" does not exist
LINE 1: SELECT mars.build_timeseries_table('apm_test."FoO_"','tagkey...
               ^
-- should error due to mars extension is too old
SELECT public.set_policy('apm_test."FoO_"'::regclass, 'mars_time_series');
ERROR:  extension mars 0.1 is too old to use mars_time_series policy
DETAIL:  ATTENTION: for mars tables created in early version of mars, may need to drop, re-populate those tables after upgrading.
HINT:  upgrade mars with: DROP EXTENSION mars CASCADE; CREATE EXTENSION mars;
CONTEXT:  PL/pgSQL function matrixts_internal.apm_mars_guard(regclass,text,jsonb) line 11 at RAISE
SQL statement "SELECT matrixts_internal.apm_mars_guard($1, $2, $3)"
PL/pgSQL function set_policy(regclass,text) line 54 at EXECUTE
-- start_ignore
DROP EXTENSION mars CASCADE;
CREATE EXTENSION mars;
-- end_ignore
DROP TABLE IF EXISTS apm_test."FoO_";
CREATE TABLE apm_test."FoO_" ("tag@" int, "timestamp" timestamp, measurement float)
DISTRIBUTED BY ("tag@") PARTITION BY RANGE("timestamp");
-- should error due to non-time-series table
SELECT public.set_policy('apm_test."FoO_"'::regclass, 'mars_time_series');
ERROR:  apm_test."FoO_" is not a time-series partition table.
DETAIL:  please refer to documentation on how to use following function
HINT:  execute mars.build_timeseries_table('apm_test."FoO_"', ...); first
CONTEXT:  PL/pgSQL function matrixts_internal.apm_mars_guard(regclass,text,jsonb) line 24 at RAISE
SQL statement "SELECT matrixts_internal.apm_mars_guard($1, $2, $3)"
PL/pgSQL function set_policy(regclass,text) line 54 at EXECUTE
SELECT mars.build_timeseries_table('apm_test."FoO_"','tagkey="tag@", timekey="timestamp", timebucket="1 hour"', true);
 build_timeseries_table 
------------------------
 t
(1 row)

-- should success
SELECT public.set_policy('apm_test."FoO_"'::regclass, 'mars_time_series');
 set_policy 
------------
 
(1 row)

